/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package edu.neu.coe.info6205.userInterface;

import edu.neu.coe.info6205.maze.RobotController;
import java.awt.CardLayout;
import java.util.ArrayList;
import java.util.HashMap;
import javax.swing.JFrame;
import javax.swing.JPanel;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartFrame;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.data.xy.XYSeries;
import org.jfree.data.xy.XYSeriesCollection;

/**
 *
 * @author fanshujie
 */
public class WelcomeJPanel extends javax.swing.JPanel {

    /**
     * Creates new form WelcomeJPanel
     */

    int[][] maze1 = new int[][] { 
            { 0, 0, 0, 0, 1, 0, 1, 3, 2 }, 
            { 1, 0, 1, 1, 1, 0, 1, 3, 1 },
            { 1, 0, 0, 1, 3, 3, 3, 3, 1 }, 
            { 3, 3, 3, 1, 3, 1, 1, 0, 1 }, 
            { 3, 1, 3, 3, 3, 1, 1, 0, 0 },
            { 3, 3, 1, 1, 1, 1, 0, 1, 1 }, 
            { 1, 3, 0, 1, 3, 3, 3, 3, 3 }, 
            { 0, 3, 1, 1, 3, 1, 0, 1, 3 },
            { 1, 3, 3, 3, 3, 1, 1, 1, 4 } 
    };
    int[][] maze2 = new int[][] { 
            { 0, 3, 3, 3, 2 }, 
            { 1, 3, 1, 1, 1 },
            { 1, 3, 0, 1, 0 }, 
            { 0, 3, 1, 1, 1 }, 
            { 1, 3, 3, 3, 4 } 
    };
    int[][] maze3 = new int[][] { 
            { 0, 0, 0, 0, 1, 0, 1, 3, 2 }, 
            { 1, 0, 1, 1, 1, 0, 1, 3, 1 },
            { 1, 0, 0, 1, 0, 0, 0, 3, 1 }, 
            { 0, 0, 0, 1, 0, 1, 1, 3, 1 }, 
            { 0, 1, 0, 0, 0, 1, 1, 3, 0 },
            { 0, 0, 1, 1, 1, 1, 0, 3, 1 },  
            { 1, 0, 0, 0, 0, 1, 1, 3, 4 } 
    };
    private JPanel CardSequenceJPanel;
    private HashMap<String, int[][]> maze = new HashMap<>();
    
        
    public WelcomeJPanel(JPanel CardSequenceJPanel) {
        initComponents();
        this.CardSequenceJPanel = CardSequenceJPanel;
        
        maze.put("maze1", maze1);
        maze.put("maze2", maze2);
        maze.put("maze3", maze3);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        maze1jButton = new javax.swing.JButton();
        maze2jButton = new javax.swing.JButton();
        maze3jButton = new javax.swing.JButton();
        AnalysisBTn = new javax.swing.JButton();
        popuAnalysisBTn = new javax.swing.JButton();

        jLabel1.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        jLabel1.setText("Welcome to Maze Simulation");

        maze1jButton.setText("Maze1");
        maze1jButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                maze1jButtonActionPerformed(evt);
            }
        });

        maze2jButton.setText("Maze2");
        maze2jButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                maze2jButtonActionPerformed(evt);
            }
        });

        maze3jButton.setText("Maze3");
        maze3jButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                maze3jButtonActionPerformed(evt);
            }
        });

        AnalysisBTn.setText("Analysis");
        AnalysisBTn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AnalysisBTnActionPerformed(evt);
            }
        });

        popuAnalysisBTn.setText("Analysis Population Size");
        popuAnalysisBTn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                popuAnalysisBTnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(139, 139, 139)
                        .addComponent(jLabel1))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                            .addGap(217, 217, 217)
                            .addComponent(maze1jButton, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createSequentialGroup()
                            .addContainerGap()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(AnalysisBTn, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(maze3jButton, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(maze2jButton, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addComponent(popuAnalysisBTn, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(188, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(54, 54, 54)
                .addComponent(jLabel1)
                .addGap(44, 44, 44)
                .addComponent(maze1jButton)
                .addGap(50, 50, 50)
                .addComponent(maze2jButton)
                .addGap(50, 50, 50)
                .addComponent(maze3jButton)
                .addGap(50, 50, 50)
                .addComponent(AnalysisBTn)
                .addGap(41, 41, 41)
                .addComponent(popuAnalysisBTn)
                .addContainerGap(62, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void maze1jButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_maze1jButtonActionPerformed
        // TODO add your handling code here:
        RobotJPanel panel = new RobotJPanel(CardSequenceJPanel, maze1);
        CardSequenceJPanel.add("SimulationScreen", panel);
        CardLayout cardlayout = (CardLayout) CardSequenceJPanel.getLayout();
        cardlayout.next(CardSequenceJPanel);

    }//GEN-LAST:event_maze1jButtonActionPerformed

    private void maze2jButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_maze2jButtonActionPerformed
        // TODO add your handling code here:
        RobotJPanel panel = new RobotJPanel(CardSequenceJPanel, maze2);
        CardSequenceJPanel.add("SimulationScreen", panel);
        CardLayout cardlayout = (CardLayout) CardSequenceJPanel.getLayout();
        cardlayout.next(CardSequenceJPanel);
    }//GEN-LAST:event_maze2jButtonActionPerformed

    private void maze3jButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_maze3jButtonActionPerformed
        // TODO add your handling code here:
        RobotJPanel panel = new RobotJPanel(CardSequenceJPanel, maze3);
        CardSequenceJPanel.add("SimulationScreen", panel);
        CardLayout cardlayout = (CardLayout) CardSequenceJPanel.getLayout();
        cardlayout.next(CardSequenceJPanel);
    }//GEN-LAST:event_maze3jButtonActionPerformed

    private void AnalysisBTnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AnalysisBTnActionPerformed
        // TODO add your handling code here:
        AnalysisJPanel panel = new AnalysisJPanel(CardSequenceJPanel, maze);
        CardSequenceJPanel.add("AnalysisScreen", panel);
        CardLayout cardlayout = (CardLayout) CardSequenceJPanel.getLayout();
        cardlayout.next(CardSequenceJPanel);
    }//GEN-LAST:event_AnalysisBTnActionPerformed

    private void popuAnalysisBTnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_popuAnalysisBTnActionPerformed
        // TODO add your handling code here:
        XYSeries series1 = new XYSeries("Analysis the Influence of Population Size"); 
        int times = 1;
        int populationSize = 200;
        for(int size = 10; size < populationSize; size++){
            RobotController r = new RobotController(1000, size, 0.05, 0.95, 2, 10);
            int routeFoundCount = 0;
            int totalTime = 0;
            for(int g = 0; g < times; g++){
                r.route(maze2);
                if(r.isRouteFound()){
                    routeFoundCount++;
                    totalTime += r.getRunTime();
                } 
            } 
            double aveTime = (double)totalTime/routeFoundCount;
            series1.add(size, aveTime);
        }
        XYSeriesCollection dataset1 = new XYSeriesCollection();
        dataset1.addSeries(series1);
        String title = "Analysis the Influence of Population Size";
        String xLabel = "Population Size";
        paintLineChart(dataset1, title, xLabel);
               
    }//GEN-LAST:event_popuAnalysisBTnActionPerformed

    public void paintLineChart(XYSeriesCollection dataset, String title, String xLabel){
        JFreeChart chart1 = ChartFactory.createXYLineChart(
                        title, // chart title
                        xLabel, // x axis label
                        "Average Running time", // y axis label
                        dataset, // data
                        PlotOrientation.VERTICAL,
                        true, // include legend
                        false, // tooltips
                        false // urls
                        );

        ChartFrame frame1 = new ChartFrame("Random Array", chart1);
        frame1.pack();
        frame1.setVisible(true);
//        frame1.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AnalysisBTn;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JButton maze1jButton;
    private javax.swing.JButton maze2jButton;
    private javax.swing.JButton maze3jButton;
    private javax.swing.JButton popuAnalysisBTn;
    // End of variables declaration//GEN-END:variables
}
