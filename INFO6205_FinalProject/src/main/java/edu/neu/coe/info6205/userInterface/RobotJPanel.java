/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package edu.neu.coe.info6205.userInterface;

import edu.neu.coe.info6205.maze.RobotController;
import java.awt.CardLayout;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTextField;

/**
 *
 * @author fanshujie
 */
public class RobotJPanel extends javax.swing.JPanel {

    /**
     * Creates new form RobotJPanel
     */
    
    JPanel c;
    int[][] m;
    JTextField[] point;       
    HashMap<Integer, ArrayList<int[]>> map;
    int generation = 1;
    

    public RobotJPanel(JPanel CardSequenceJPanel, int[][] m) {
        initComponents();
        this.c = CardSequenceJPanel;
        this.m = m;
        paint();  
    }
    
    
    public void paint(){
        point = new JTextField[m.length * m[0].length];
        int posx, posy;       
        posy = 50;
        
        for(int i=0; i<m.length; i++){            
            posx = 400;

            for(int j=0; j<m[0].length; j++){
                point[(m[0].length*i)+j] = new JTextField();
                point[(m[0].length*i)+j].setText("");
                point[(m[0].length*i)+j].setEditable(false);
                point[(m[0].length*i)+j].setHorizontalAlignment(JTextField.CENTER);
                
                
                point[(m[0].length*i)+j].setBounds(posx, posy, 30, 30);

                add(point[(m[0].length*i)+j]);
                posx += 22;
            }
            posy += 22;
            
        }
        
        paintColor();
    }
    
    
    public void paintColor(){
        int z = 0;
        for(int[] a : m){
            for(int i : a){
                if(i == 1){
                    point[z].setBackground(java.awt.Color.black);
                }
                else if(i == 2){
                    point[z].setBackground(java.awt.Color.blue);
                }
                else if(i == 4){
                    point[z].setBackground(java.awt.Color.green);
                }
                else{
                    point[z].setBackground(java.awt.Color.white);
                }
                z++;
            }
        }
    }
    
    private boolean validation(String gene){
        Pattern p1 = Pattern.compile("^[0-9]+$");
        Matcher m1 = p1.matcher(gene);
        boolean flag = m1.matches();
        if(!flag){
            JOptionPane.showMessageDialog(null, "Generations can only be integers!");
        }        
        return flag;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        geneJtext = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        statusJtext = new javax.swing.JTextField();
        backBtn = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();

        jLabel1.setText("MaxGeneration:");

        geneJtext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                geneJtextActionPerformed(evt);
            }
        });
        geneJtext.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                geneJtextKeyTyped(evt);
            }
        });

        jButton1.setText("Go");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        statusJtext.setEnabled(false);

        backBtn.setText("<<Back");
        backBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backBtnActionPerformed(evt);
            }
        });

        jLabel2.setText("Status:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(backBtn)
                    .addComponent(statusJtext, javax.swing.GroupLayout.PREFERRED_SIZE, 205, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(jButton1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(geneJtext, javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap(379, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(50, 50, 50)
                .addComponent(jLabel1)
                .addGap(31, 31, 31)
                .addComponent(geneJtext, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButton1)
                .addGap(18, 18, 18)
                .addComponent(jLabel2)
                .addGap(18, 18, 18)
                .addComponent(statusJtext, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(46, 46, 46)
                .addComponent(backBtn)
                .addContainerGap(67, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void geneJtextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_geneJtextActionPerformed
        // TODO add your handling code here:

    }//GEN-LAST:event_geneJtextActionPerformed

    private void geneJtextKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_geneJtextKeyTyped
        // TODO add your handling code here:

    }//GEN-LAST:event_geneJtextKeyTyped

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        if(geneJtext.getText().isEmpty()){
            JOptionPane.showMessageDialog(null, "Input can not be null!");
            return;
        }
        String ge = geneJtext.getText();
        if(!validation(ge)){
            return;
        }
        generation = Integer.valueOf(ge);
        RobotController rc = new RobotController(generation);
        map = rc.route(m);
        
//        System.out.println("size:" + map.size());
        System.out.println("Animation Started: ");

        statusJtext.setText("Start Animation");

        new Thread(new Runnable() {
            boolean routeFound = false;
            @Override
            public void run() {
                try {
                    for(int i = 1; i <= map.size(); i++){
                        paintColor();
                        boolean startFlag = false;
                        boolean endFlag = false;
                        for(int[] po : map.get(i)){
                            if(m[po[1]][po[0]] != 2 && m[po[1]][po[0]] != 4){
                                point[m[0].length*po[1] + po[0]].setBackground(java.awt.Color.red);
                            }                           
                            if(m[po[1]][po[0]] == 2) startFlag = true;
                            if(m[po[1]][po[0]] == 4) endFlag = true;
                        }
                        if(startFlag && endFlag) routeFound = true;
                        System.out.println("Generation: " + i);
                        Thread.sleep(50);
                    }

                } catch (InterruptedException ex) {
                    ex.printStackTrace();
                } finally{
                    if(routeFound){
                        statusJtext.setText("Complete, route found");
                        System.out.println("Animation Completed, route found");
                    }
                    else{
                        statusJtext.setText("Complete, failed to find route");
                        System.out.println("Animation Completed, failed to find route");
                    }
                }

            }
        }).start();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void backBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backBtnActionPerformed
        // TODO add your handling code here:
        c.remove(this);
        CardLayout cardLayout = (CardLayout) c.getLayout();
        cardLayout.previous(c);
    }//GEN-LAST:event_backBtnActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backBtn;
    private javax.swing.JTextField geneJtext;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JTextField statusJtext;
    // End of variables declaration//GEN-END:variables
}
